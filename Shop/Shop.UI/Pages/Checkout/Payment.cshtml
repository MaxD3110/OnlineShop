@page
@model Shop.UI.Pages.Checkout.PaymentModel
@{
}

<style>
    .paymentform {
        min-height: 450px;
        margin: 20px auto;
        visibility: hidden;
        opacity: 0;
        transition: visibility 0s, opacity 0.5s linear 0.5s;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        max-width: 500px;
        align-self: center;
        box-shadow: 0px 0px 0px 0.5px rgba(50, 50, 93, 0.1), 0px 2px 5px 0px rgba(50, 50, 93, 0.1), 0px 1px 1.5px 0px rgba(0, 0, 0, 0.07);
        border-radius: 7px;
        padding: 40px;
        margin: 20px auto;
    }

    .formSign {
        border: 1px solid #ebebeb;
        max-width: 550px;
        max-height: 400px;
        position: relative;
        top: 50%;
        left: 50%;
        padding: 60px;
        margin-top: 300px;
        transform: translate(-50%, -50%);
    }
</style>

<form method="post" id="payment-form" style="justify-content:center">
    <div class="formSign">
        <h4 style="text-align: center">Введите данные</h4>
        <div id="card-element" style="width: 30em; padding-top: 3.6rem">
            <!-- A Stripe Element will be inserted here. -->
        </div>
        <!-- Used to display form errors. -->
        <div id="card-errors" role="alert"></div>

        <div class="form-footer" style="padding-top: 5.6rem">
            <button type="submit" class="btn btn-outline-primary-2" name="name">
                <span>Оплатить</span>
                <i class="icon-long-arrow-right"></i>
            </button>
        </div><!-- End .form-footer -->
    </div>
</form>

@*<div class="column is-6">
        <vc:cart view="Default"> </vc:cart>
    </div>*@


@section scripts {

    <script src="https://js.stripe.com/v3/"></script>
    <script>
        // A reference to Stripe.js initialized with a fake API key.
        var stripe = Stripe('@Model.PublicKey');

        // Create an instance of Elements.
        var elements = stripe.elements();
        // Custom styling can be passed to options when creating an Element.
        // (Note that this dặmo uses a wider set of styles than the guide below.)
        var style = {
            base: {
                color: '#32325d',
                lineHeight: '18px',
                fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
    fontSmoothing: 'antialiased',
            fontSize: '16px',
            '::placeholder': {
                color: '#aab7c4'
            }
        },
            invalid: {
                color: '#fa755a',
                iconcolor: '#fa755a'
            }
        };

        // Create an instance of the card Element.
        var card = elements.create('card', {style: style});
        // Add an instance of the card Element into the card-element <div>.
        card.mount('#card-element');
        // Handle real-time validation errors from the card Element.
        card.addEventListener('change', function (event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
            });
        // Handle form submission.
        var form = document.getElementById('payment-form');
        form.addEventListener('submit', function (event) {
            event.preventDefault();

            stripe.createToken(card).then(function (result) {
                if (result.error) {
                    // Inform the user if there was an error.
                    var errorElement = document.getElementById('card-errors');
   errorElement.textContent = result.error.message;
                } else {

                    // Send the token to your server.
                    stripeTokenHandler(result.token);
                }
            });
        });
        // Submit the form with the token ID.
        function stripeTokenHandler(token) {
            // Insert the token ID into the form so it gets submitted to the server
            var form = document.getElementById('payment-form');
            var hiddenInput = document.createElement('input');
            hiddenInput.setAttribute('type', 'hidden');
            hiddenInput.setAttribute('name', 'stripeToken');
            hiddenInput.setAttribute('value', token.id);
            form.appendChild(hiddenInput);
            // Submit the form

            form.submit();
        }
    </script>

}