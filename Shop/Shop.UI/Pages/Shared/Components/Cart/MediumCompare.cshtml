@model IEnumerable<Shop.Application.Compare.GetCompare.Response>
@{
}

<div class="dropdown cart-dropdown" id="compare-med">
    <a class="dropdown-toggle" role="button" @*data-toggle="dropdown"*@ aria-haspopup="true" aria-expanded="false" data-display="static" href="/Compare">
        <div class="icon">
            <i class="icon-random"></i>
            @if (Model.Count() > 0)
            {
                <span class="cart-count">@Model.Count()</span>
            }
        </div>
        <p>Сравнение</p>
    </a>

    @if (Model.Count() > 0)
    {
        <div class="dropdown-menu dropdown-menu-right">

                <ul class="compare-products">
                    @foreach (var product in Model)
                    {
                        <li class="compare-product" data-stockid="@product.StockId">
                            <a href="#" class="btn-remove" onclick="removeFromCompare(@product.StockId)" title="Удалить"><i class="icon-close"></i></a>
                            <h4 class="compare-product-title"><a href="Product/@product.Name.Replace(" ", "-")">@product.ProductDescription @product.Name (@product.Description)</a></h4>
                        </li>
                    }
                </ul>
                @*<a href="Product/@product.Name.Replace(" ", "-")" class="product-image">
                        @if (!String.IsNullOrEmpty(product.PropImage))
                        {
                            var image_path = $"/images/productsfolder/{product.PropImage}";
                            <img src="@image_path" class="product-image" />
                        }
                    </a>*@


            <div class="compare-actions">
                <a class="action-link" onclick="removeAllFromCompare()">Очистить</a>
                <a href="/Compare" class="btn btn-outline-primary-2"><span>Сравнить</span><i class="icon-long-arrow-right"></i></a>
            </div><!-- End .dropdown-cart-total -->

            </div><!-- End .cart-product -->

    }
</div>

<script>

    var addOneToCompare = function (e) {
        var stockId = e.target.dataset.stockId;
        axios.post("/Compare/AddOneCompare/" + stockId)
            .then(res => {
                updateCompare();
            }).catch(err => {
                alert(err.error);
            })
    }

    var removeOneFromCompare = function (e) {
        var stockId = e.target.dataset.stockId;
        removeFromCompare(stockId);
    }

    var removeAllFromCompare = function () {
        var doc = document.getElementsByClassName("compare-product");
        var count = document.getElementsByClassName("compare-product").length;
        for (var i = 0; i < count; i++) {

            console.log(doc.length);
            stockId = doc[i].getAttribute("data-stockid");
            console.log(stockId);
            axios.post("/Compare/RemoveCompare/" + stockId)
            updateCompare();
        }
        updateCompare();
    }

    var removeFromCompare = function (stockId) {
        axios.post("/Compare/RemoveCompare/" + stockId)
            .then(res => {
                updateCompare();
            }).catch(err => {
                alert(err.error);
            })
    }

    var updateCompare = function () {
        axios.get('/Compare/GetCompareMedium')
            .then(res => {
                var html = res.data;
                var el = document.getElementById('compare-med');

                el.outerHTML = html;
            });
        axios.get('/Compare/GetCompareMain')
            .then(res => {
                var html = res.data;
                var el = document.getElementById('compare-main');

                el.outerHTML = html;
            })

    }

</script>